//Generated by Blueprint
using System;
using System.Collections.Generic;
using UnityEngine;
namespace Blueprint.Logic
{
	public class AutoTest_ProcessCase : Blueprint.Logic.BP_Base
	{
		public UnityEngine.GameObject AT_ProcessCase = default;
		public Blueprint.Logic.PlanSetupStruct PlanSetupData = new Blueprint.Logic.PlanSetupStruct()
		{
			ID = "W4IA7kknblTsIv1mRtmj8TnvllRWmuJv",
			IP = "1.1.1.1",
			ServerID = "xuanfu",
			WaitForButton = 600,
			WaitForWalk = 600,
			UserName = new List<string>()
			{
				
			},
			PassWord = "",
			VersionID = "W4IA7kknblTsIv1mRtmj8TnvllRWmuJv",
			
		};
		public Blueprint.UnityLogic.AT_EventManager AT_EventManager = default;
		public AutoTest_ProcessCase()
		{
			
		}
		public override void Start()
		{
			//预定义节点ClassNew_2
			var ClassNew_2_object = new Blueprint.Logic.AutoTest_ProcessCase();
			//预定义节点VarSetGlobal_5
			Blueprint.Logic.Client.AutoTest_ProcessCaseInstance = ClassNew_2_object;
			//执行节点isEditorPlatform_28
			var isEditorPlatform_28_ret = PTestNode.isEditorPlatform();
			//预定义节点IfThenElse_29
			if (isEditorPlatform_28_ret)
			{
				//预定义节点设置 PlanSetupData_103
				Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData = new Blueprint.Logic.PlanSetupStruct()
				{
					ID = "W4IA7kknblTsIv1mRtmj8TnvllRWmuJv",
					IP = "1.1.1.1",
					ServerID = "xuanfu",
					WaitForButton = 600,
					WaitForWalk = 600,
					UserName = new List<string>()
					{
						
					},
					PassWord = "",
					VersionID = "W4IA7kknblTsIv1mRtmj8TnvllRWmuJv",
					
				};
				var MapGet_value_94 = Blueprint.Logic.Client.PlanSetupConfig["1"];
				if (MapGet_value_94 != null)
				{
					
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.ID = MapGet_value_94.ID;
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.IP = MapGet_value_94.IP;
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.ServerID = MapGet_value_94.ServerID;
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.WaitForButton = MapGet_value_94.WaitForButton;
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.WaitForWalk = MapGet_value_94.WaitForWalk;
					if (MapGet_value_94.UserName != null)
					{
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.UserName.Clear();
						for(var i = 0; i < MapGet_value_94.UserName.Count; i++)
						{
							var MapGet_value_94_UserName_struct_temp = MapGet_value_94.UserName[i];
							Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.UserName.Add(MapGet_value_94_UserName_struct_temp);
						}
						
					}
					
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.PassWord = MapGet_value_94.PassWord;
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.VersionID = MapGet_value_94.VersionID;
					
				}
				
				
			}
			else
			{
				//执行节点GetCSVDataWithName_24
				var GetCSVDataWithName_24_ret = PTestNode.GetCSVDataWithName("PlanSetupConfig.csv");
				//执行节点ReadCSVStringToJson_27
				var ReadCSVStringToJson_27_ret = PTestNode.ReadCSVStringToJson(GetCSVDataWithName_24_ret);
				//节点StringConcat_80
				var StringConcat_80_value = "AutoTest_ProcessCase: " + ReadCSVStringToJson_27_ret;
				//执行节点Log_78
				UnityEngine.Debug.Log(StringConcat_80_value);
				//预定义节点JsonToStructList_40
				var JsonToStructList_40_data = Blueprint.Actor.ActorManager.JsonToStruct<List<PlanSetupStruct>>(ReadCSVStringToJson_27_ret);
				if (JsonToStructList_40_data != null)
				{
					//预定义节点设置 PlanSetupData_38
					Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData = new Blueprint.Logic.PlanSetupStruct()
					{
						ID = "W4IA7kknblTsIv1mRtmj8TnvllRWmuJv",
						IP = "1.1.1.1",
						ServerID = "xuanfu",
						WaitForButton = 600,
						WaitForWalk = 600,
						UserName = new List<string>()
						{
							
						},
						PassWord = "",
						VersionID = "W4IA7kknblTsIv1mRtmj8TnvllRWmuJv",
						
					};
					var ArrayGet_element_41 = JsonToStructList_40_data[0];
					if (ArrayGet_element_41 != null)
					{
						
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.ID = ArrayGet_element_41.ID;
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.IP = ArrayGet_element_41.IP;
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.ServerID = ArrayGet_element_41.ServerID;
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.WaitForButton = ArrayGet_element_41.WaitForButton;
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.WaitForWalk = ArrayGet_element_41.WaitForWalk;
						if (ArrayGet_element_41.UserName != null)
						{
							Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.UserName.Clear();
							for(var i = 0; i < ArrayGet_element_41.UserName.Count; i++)
							{
								var ArrayGet_element_41_UserName_struct_temp = ArrayGet_element_41.UserName[i];
								Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.UserName.Add(ArrayGet_element_41_UserName_struct_temp);
							}
							
						}
						
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.PassWord = ArrayGet_element_41.PassWord;
						Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.VersionID = ArrayGet_element_41.VersionID;
						
					}
					
					
				}
				else
				{
					//节点StringValue_72
					var StringValue_72_value = "PlanSetup.csv转换失败";
					//执行节点Log_71
					UnityEngine.Debug.Log(StringValue_72_value);
					//执行节点CaseSteps_33
					PTestNode.CaseSteps("PlanSetup.csv转换失败", "PlanSetup.csv转换失败", "PlanSetup.csv转换失败", false, ScreenType.None);
					//执行节点CaseFinished_34
					PTestNode.CaseFinished();
					
				}
				
			}
			//执行节点Find_43
			var Find_43_ret = UnityEngine.GameObject.Find("AT_EventManager(Clone)");
			//预定义节点GetActorFromObject_44
			var GetActorFromObject_44_actor = Find_43_ret.GetComponent<Blueprint.Actor.BlueprintActor>().BpActor as Blueprint.UnityLogic.AT_EventManager;
			if (GetActorFromObject_44_actor != null)
			{
				//预定义节点设置 AT_EventManager_47
				Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.AT_EventManager = GetActorFromObject_44_actor;
				//执行节点SetEventData_87
				GetActorFromObject_44_actor.SetEventData("AutoTest_EventManagerConfig.csv");
				//执行节点StartEventManager_45
				GetActorFromObject_44_actor.StartEventManager();
				//执行节点LoadGameObject_104
				var LoadGameObject_104_ret = BpPluginNode.LoadGameObject("AT_ProcessCase");
				//执行节点DontDestroyOnLoad_3
				UnityEngine.Object.DontDestroyOnLoad(LoadGameObject_104_ret);
				//预定义节点设置 AT_ProcessCase_57
				Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.AT_ProcessCase = LoadGameObject_104_ret;
				//预定义节点GetActorFromObject_62
				var GetActorFromObject_62_actor = Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.AT_ProcessCase.GetComponent<Blueprint.Actor.BlueprintActor>().BpActor as Blueprint.UnityLogic.AT_ProcessCase;
				if (GetActorFromObject_62_actor != null)
				{
					//预定义节点设置 AT_Manager_88
					GetActorFromObject_62_actor.AT_Manager = GetActorFromObject_44_actor;
					//执行节点isEditorPlatform_60
					var isEditorPlatform_60_ret = PTestNode.isEditorPlatform();
					//预定义节点IfThenElse_59
					if (isEditorPlatform_60_ret)
					{
						//预定义节点设置 AutoTest_ProcessData_63
						GetActorFromObject_62_actor.AutoTest_ProcessData = new Dictionary<int, Blueprint.Logic.AutoTest_ProcessStruct>();
						var VarGetGlobal_value_61 = Blueprint.Logic.Client.AutoTest_ProcessConfig;
						if (VarGetGlobal_value_61 != null)
						{
							GetActorFromObject_62_actor.AutoTest_ProcessData.Clear();
							foreach(var i in VarGetGlobal_value_61)
							{
								var VarGetGlobal_value_61_dic_temp = new Blueprint.Logic.AutoTest_ProcessStruct()
								{
									ID = 0,
									TriggerType = "",
									TriggerValue = new List<string>()
									{
										"None",
										
									},
									TodoType = 0,
									TodoValue = "",
									TodoDelay = 0.0f,
									Next = 0,
									OperationType = 0,
									
								};
								if (i.Value != null)
								{
									
									VarGetGlobal_value_61_dic_temp.ID = i.Value.ID;
									VarGetGlobal_value_61_dic_temp.TriggerType = i.Value.TriggerType;
									if (i.Value.TriggerValue != null)
									{
										VarGetGlobal_value_61_dic_temp.TriggerValue.Clear();
										for(var j = 0; j < i.Value.TriggerValue.Count; j++)
										{
											var i_Value_TriggerValue_struct_temp = i.Value.TriggerValue[j];
											VarGetGlobal_value_61_dic_temp.TriggerValue.Add(i_Value_TriggerValue_struct_temp);
										}
										
									}
									
									VarGetGlobal_value_61_dic_temp.TodoType = i.Value.TodoType;
									VarGetGlobal_value_61_dic_temp.TodoValue = i.Value.TodoValue;
									VarGetGlobal_value_61_dic_temp.TodoDelay = i.Value.TodoDelay;
									VarGetGlobal_value_61_dic_temp.Next = i.Value.Next;
									VarGetGlobal_value_61_dic_temp.OperationType = i.Value.OperationType;
									
								}
								GetActorFromObject_62_actor.AutoTest_ProcessData[i.Key] = VarGetGlobal_value_61_dic_temp;
							}
							
						}
						
						
					}
					else
					{
						//执行节点GetCSVDataWithName_64
						var GetCSVDataWithName_64_ret = PTestNode.GetCSVDataWithName("AutoTest_ProcessConfig.csv");
						//执行节点ReadCSVStringToJson_65
						var ReadCSVStringToJson_65_ret = PTestNode.ReadCSVStringToJson(GetCSVDataWithName_64_ret);
						//节点StringConcat_82
						var StringConcat_82_value = "AutoTest_ProcessCase: " + ReadCSVStringToJson_65_ret;
						//执行节点Log_81
						UnityEngine.Debug.Log(StringConcat_82_value);
						//预定义节点JsonToStructList_66
						var JsonToStructList_66_data = Blueprint.Actor.ActorManager.JsonToStruct<List<AutoTest_ProcessStruct>>(ReadCSVStringToJson_65_ret);
						if (JsonToStructList_66_data != null)
						{
							//预定义节点MapClear_76
							GetActorFromObject_62_actor.AutoTest_ProcessData.Clear();
							//预定义节点ArrayLoop_74
							for(int ArrayLoop_74_index = 0; ArrayLoop_74_index < JsonToStructList_66_data.Count; ++ArrayLoop_74_index)
							{
								var struct_74_element = JsonToStructList_66_data[ArrayLoop_74_index];
								//预定义节点MapSet_77
								GetActorFromObject_62_actor.AutoTest_ProcessData[struct_74_element.ID] = struct_74_element;
								
							}
							
						}
						else
						{
							//节点StringValue_70
							var StringValue_70_value = "AutoTest_ProcessConfig.csv转换失败";
							//执行节点Log_69
							UnityEngine.Debug.Log(StringValue_70_value);
							//执行节点CaseSteps_67
							PTestNode.CaseSteps("AutoTest_ProcessConfig.csv转换失败", "AutoTest_ProcessConfig.csv转换失败", "AutoTest_ProcessConfig.csv转换失败", false, ScreenType.None);
							//执行节点CaseFinished_68
							PTestNode.CaseFinished();
							
						}
						
					}
					
				}
				else
				{
					
				}
				
			}
			else
			{
				
			}
			
		}
		public override void OnDestroy()
		{
			//执行节点StopEventManager_53
			Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.AT_EventManager.StopEventManager();
			//执行节点Destroy_54
			UnityEngine.Object.Destroy(Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.AT_ProcessCase);
			
		}
		
	}
}