//Generated by Blueprint
using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using Blueprint.Actor.EventSystem;
using Blueprint.Logic;
namespace Blueprint.UnityLogic
{
	[LoadPath(@"AT_EventManager")]
	public class AT_EventManager : Blueprint.Actor.ActorBase
	{
		public Dictionary<int, Blueprint.Logic.AutoTest_EventManagerConfigStruct> AutoTest_EventManagerData = new Dictionary<int, Blueprint.Logic.AutoTest_EventManagerConfigStruct>()
		{
			
		};
		public string TriggerType = "";
		public List<string> TriggerValue = new List<string>()
		{
			
		};
		public Blueprint.DelayHandle DelayHandle = default;
		public List<string> ToDoList = new List<string>()
		{
			
		};
		public Blueprint.Actor.ActorInvoke DoTypeOneInvoke = default;
		public int NextEventID = 0;
		public Blueprint.Actor.ActorInvoke DoTypeTwoInvoke = default;
		public int CurrEventID = 0;
		public int WalkToEventID = 0;
		public AT_EventManager()
		{
			
		}
		public override void ResetVarValue()
		{
			base.ResetVarValue();
			DelayControl.Instance.RemoveAllDelay(this);
			AutoTest_EventManagerData = new Dictionary<int, Blueprint.Logic.AutoTest_EventManagerConfigStruct>()
			{
				
			};
			TriggerType = "";
			TriggerValue = new List<string>()
			{
				
			};
			DelayHandle = default;
			ToDoList = new List<string>()
			{
				
			};
			DoTypeOneInvoke = default;
			NextEventID = 0;
			DoTypeTwoInvoke = default;
			CurrEventID = 0;
			WalkToEventID = 0;
			
		}
		public override void Awake()
		{
			base.Awake();
			
			// 因为无法触发第一次enable，所以这里手动触发第一次
			actorEventSystem.Send(ActorEventType.OnEnable);
		}
		public override void Start()
		{
			
		}
		public override void Update()
		{
			
		}
		public virtual void SetEventData(string SetEventData_url)
		{
			//函数局部变量
			//执行节点isEditorPlatform_3
			var isEditorPlatform_3_ret = PTestNode.isEditorPlatform();
			//预定义节点IfThenElse_2
			if (isEditorPlatform_3_ret)
			{
				//预定义节点VarSetLocal_4
				this.AutoTest_EventManagerData = new Dictionary<int, Blueprint.Logic.AutoTest_EventManagerConfigStruct>();
				var VarGetGlobal_value_23 = Blueprint.Logic.Client.AutoTest_EventManagerConfig;
				if (VarGetGlobal_value_23 != null)
				{
					this.AutoTest_EventManagerData.Clear();
					foreach(var i in VarGetGlobal_value_23)
					{
						var VarGetGlobal_value_23_dic_temp = new Blueprint.Logic.AutoTest_EventManagerConfigStruct()
						{
							ID = 0,
							TriggerType = "",
							TriggerValue = new List<string>()
							{
								
							},
							TodoType = 0,
							TodoList = new List<string>()
							{
								
							},
							TodoDelay = 0.0f,
							LoopNum = 0,
							Next = 0,
							OperationType = 0,
							
						};
						if (i.Value != null)
						{
							
							VarGetGlobal_value_23_dic_temp.ID = i.Value.ID;
							VarGetGlobal_value_23_dic_temp.TriggerType = i.Value.TriggerType;
							if (i.Value.TriggerValue != null)
							{
								VarGetGlobal_value_23_dic_temp.TriggerValue.Clear();
								for(var j = 0; j < i.Value.TriggerValue.Count; j++)
								{
									var i_Value_TriggerValue_struct_temp = i.Value.TriggerValue[j];
									VarGetGlobal_value_23_dic_temp.TriggerValue.Add(i_Value_TriggerValue_struct_temp);
								}
								
							}
							
							VarGetGlobal_value_23_dic_temp.TodoType = i.Value.TodoType;
							if (i.Value.TodoList != null)
							{
								VarGetGlobal_value_23_dic_temp.TodoList.Clear();
								for(var k = 0; k < i.Value.TodoList.Count; k++)
								{
									var i_Value_TodoList_struct_temp = i.Value.TodoList[k];
									VarGetGlobal_value_23_dic_temp.TodoList.Add(i_Value_TodoList_struct_temp);
								}
								
							}
							
							VarGetGlobal_value_23_dic_temp.TodoDelay = i.Value.TodoDelay;
							VarGetGlobal_value_23_dic_temp.LoopNum = i.Value.LoopNum;
							VarGetGlobal_value_23_dic_temp.Next = i.Value.Next;
							VarGetGlobal_value_23_dic_temp.OperationType = i.Value.OperationType;
							
						}
						this.AutoTest_EventManagerData[i.Key] = VarGetGlobal_value_23_dic_temp;
					}
					
				}
				
				
			}
			else
			{
				//执行节点GetCSVDataWithName_6
				var GetCSVDataWithName_6_ret = PTestNode.GetCSVDataWithName("AutoTest_EventManagerConfig.csv");
				//执行节点ReadCSVStringToJson_7
				var ReadCSVStringToJson_7_ret = PTestNode.ReadCSVStringToJson(GetCSVDataWithName_6_ret);
				//节点StringConcat_10
				var StringConcat_10_value = "AutoTest_EventManager: " + ReadCSVStringToJson_7_ret;
				//执行节点Log_9
				UnityEngine.Debug.Log(StringConcat_10_value);
				//预定义节点JsonToStructList_26
				var JsonToStructList_26_data = Blueprint.Actor.ActorManager.JsonToStruct<List<AutoTest_EventManagerConfigStruct>>(ReadCSVStringToJson_7_ret);
				if (JsonToStructList_26_data != null)
				{
					//预定义节点MapClear_25
					this.AutoTest_EventManagerData.Clear();
					//预定义节点ArrayLoop_27
					for(int ArrayLoop_27_index = 0; ArrayLoop_27_index < JsonToStructList_26_data.Count; ++ArrayLoop_27_index)
					{
						var struct_27_element = JsonToStructList_26_data[ArrayLoop_27_index];
						//预定义节点MapSet_28
						this.AutoTest_EventManagerData[struct_27_element.ID] = struct_27_element;
						
					}
					
				}
				else
				{
					//节点StringValue_16
					var StringValue_16_value = "AutoTest_EventManagerConfig.csv转换失败";
					//执行节点Log_15
					UnityEngine.Debug.Log(StringValue_16_value);
					//执行节点CaseSteps_13
					PTestNode.CaseSteps("AutoTest_EventManagerConfig.csv转换失败", "AutoTest_EventManagerConfig.csv转换失败", "AutoTest_EventManagerConfig.csv转换失败", false, ScreenType.SceenShot);
					//执行节点CaseFinished_14
					PTestNode.CaseFinished();
					
				}
				
			}
			
			
		}
		public virtual int GetEventID()
		{
			//函数局部变量
			//预定义节点MapLoop_4
			foreach(var MapLoop_4_item in this.AutoTest_EventManagerData)
			{
				var MapLoop_4_key = MapLoop_4_item.Key;
				var struct_4_value = MapLoop_4_item.Value;
				//节点Equal_17
				var Equal_17_ret = this.TriggerType == "WalkFinish";
				//节点IntToString_21
				var IntToString_21_value = Convert.ToString(this.WalkToEventID);
				//节点Equal_19
				var Equal_19_ret = struct_4_value.TriggerValue[0] == IntToString_21_value;
				//节点And_18
				var And_18_value = Equal_17_ret && Equal_19_ret ;
				//预定义节点IfThenElse_15
				if (And_18_value)
				{
					//预定义节点Output_22
					return MapLoop_4_key;
					
				}
				else
				{
					//节点Equal_6
					var Equal_6_ret = struct_4_value.TriggerType == this.TriggerType;
					//节点Equal_10
					var Equal_10_ret = struct_4_value.TriggerValue[0] == this.TriggerValue[0];
					//节点And_8
					var And_8_value = Equal_6_ret && Equal_10_ret ;
					//预定义节点IfThenElse_5
					if (And_8_value)
					{
						//预定义节点Output_13
						return MapLoop_4_key;
						
					}
					else
					{
						
					}
					
				}
				
			}
			//预定义节点Output_2
			return 0;
			return default;
			
		}
		public virtual void DoTypeOne()
		{
			//函数局部变量
			//节点Greater_5
			var Greater_5_ret = this.ToDoList.Count > 0;
			//预定义节点IfThenElse_2
			if (Greater_5_ret)
			{
				//节点StringConcat_18
				var StringConcat_18_value = "AutoTest_EventManager: Do Type 1 - " + this.ToDoList[0];
				//执行节点Log_17
				UnityEngine.Debug.Log(StringConcat_18_value);
				//执行节点DoDiffOperation_21
				this.DoDiffOperation(this.AutoTest_EventManagerData[this.CurrEventID].OperationType, this.ToDoList[0]);
				//预定义节点ArrayRemove_13
				this.ToDoList.RemoveAt(0);
				
			}
			else
			{
				//节点IsNull_25
				var IsNull_25_ret = this.DoTypeOneInvoke == null;
				//预定义节点IfThenElse_24
				if (IsNull_25_ret)
				{
					
				}
				else
				{
					//执行节点Cancel_6
					this.DoTypeOneInvoke.Cancel();
					
				}
				//预定义节点IfThenElse_8
				if (this.AutoTest_EventManagerData.ContainsKey(this.NextEventID))
				{
					//执行节点ToDoEvent_12
					this.ToDoEvent(this.NextEventID);
					
				}
				else
				{
					
				}
				
			}
			
			
		}
		public virtual void DoTypeTwo()
		{
			//函数局部变量
			//节点Greater_5
			var Greater_5_ret = this.ToDoList.Count > 0;
			//预定义节点IfThenElse_2
			if (Greater_5_ret)
			{
				//节点StringConcat_18
				var StringConcat_18_value = "AutoTest_EventManager: Do Type 2 - " + this.ToDoList[0];
				//执行节点Log_17
				UnityEngine.Debug.Log(StringConcat_18_value);
				//执行节点DoDiffOperation_26
				this.DoDiffOperation(this.AutoTest_EventManagerData[this.CurrEventID].OperationType, this.ToDoList[0]);
				//预定义节点ArrayRemove_13
				this.ToDoList.RemoveAt(0);
				
			}
			else
			{
				//节点IsNull_31
				var IsNull_31_ret = this.DoTypeTwoInvoke == null;
				//预定义节点IfThenElse_30
				if (IsNull_31_ret)
				{
					
				}
				else
				{
					//执行节点Cancel_6
					this.DoTypeTwoInvoke.Cancel();
					
				}
				//预定义节点MapRemove_24
				this.AutoTest_EventManagerData.Remove(this.CurrEventID);
				//预定义节点IfThenElse_8
				if (this.AutoTest_EventManagerData.ContainsKey(this.NextEventID))
				{
					//执行节点ToDoEvent_12
					this.ToDoEvent(this.NextEventID);
					
				}
				else
				{
					
				}
				
			}
			
			
		}
		public virtual void SetWalkToID(string SetWalkToID_gm, int SetWalkToID_ID)
		{
			//函数局部变量
			//节点StringContains_4
			var StringContains_4_ret = SetWalkToID_gm.Contains("WalkToPos");
			//预定义节点IfThenElse_2
			if (StringContains_4_ret)
			{
				//预定义节点VarSetLocal_5
				this.WalkToEventID = SetWalkToID_ID;
				
			}
			else
			{
				
			}
			
			
		}
		public virtual void DoDiffOperation(int DoDiffOperation_operation, string DoDiffOperation_cmd)
		{
			//函数局部变量
			//节点IntToString_34
			var IntToString_34_value = Convert.ToString(DoDiffOperation_operation);
			//节点StringValue_35
			var StringValue_35_value = " - ";
			//节点StringConcat_32
			var StringConcat_32_value = "AutoTest_EventManager: Operation " + IntToString_34_value + StringValue_35_value + DoDiffOperation_cmd;
			//执行节点Log_33
			UnityEngine.Debug.Log(StringConcat_32_value);
			//预定义节点SwitchOnInt_2
			switch(DoDiffOperation_operation)
			{
				case 0:
				{
					//执行节点CallGM_25
					BpPluginNode.CallGM(DoDiffOperation_cmd);
					//节点StringConcat_7
					var StringConcat_7_value = "AutoTest_EventManager: 执行GM指令 - " + DoDiffOperation_cmd;
					//执行节点CaseSteps_18
					PTestNode.CaseSteps(StringConcat_7_value, StringConcat_7_value, StringConcat_7_value, true, ScreenType.None);
					//执行节点Log_6
					UnityEngine.Debug.Log(StringConcat_7_value);
					//预定义节点Output_29
					return;
					break;
				}
				case 1:
				{
					//节点StringConcat_30
					var StringConcat_30_value = "AutoTest_EventManager: 开始寻找按钮 -" + DoDiffOperation_cmd;
					//执行节点Log_31
					UnityEngine.Debug.Log(StringConcat_30_value);
					//数据节点Getinstance_26
					var Getinstance_26_instance = BpPluginNode.instance;
					//执行节点FindGameobjLooper_27
					Getinstance_26_instance.FindGameobjLooper(DoDiffOperation_cmd, Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.WaitForButton, ()=>
					{
						//节点StringConcat_21
						var StringConcat_21_value = "AutoTest_EventManager: 未找到按钮 - " + DoDiffOperation_cmd;
						//执行节点CaseSteps_19
						PTestNode.CaseSteps(StringConcat_21_value, StringConcat_21_value, StringConcat_21_value, false, ScreenType.None);
						//执行节点Log_13
						UnityEngine.Debug.Log(StringConcat_21_value);
						//执行节点CaseFinished_20
						PTestNode.CaseFinished();
						//预定义节点Output_29
						return;
						
					}
					, (CallbackFunction_24_arg1)=>
					{
						//执行节点UIClick_28
						BpPluginNode.UIClick(DoDiffOperation_cmd);
						//节点StringConcat_14
						var StringConcat_14_value = "AutoTest_EventManager: 点击按钮 - " + DoDiffOperation_cmd;
						//执行节点CaseSteps_22
						PTestNode.CaseSteps(StringConcat_14_value, StringConcat_14_value, StringConcat_14_value, true, ScreenType.None);
						//执行节点Log_15
						UnityEngine.Debug.Log(StringConcat_14_value);
						//预定义节点Output_29
						return;
						
					}
					);
					break;
				}
				case 2:
				{
					//节点StringConcat_16
					var StringConcat_16_value = "AutoTest_EventManager: 拍照 - " + DoDiffOperation_cmd;
					//执行节点CaseSteps_4
					PTestNode.CaseSteps(StringConcat_16_value, StringConcat_16_value, StringConcat_16_value, true, ScreenType.SceenShot);
					//执行节点Log_17
					UnityEngine.Debug.Log(StringConcat_16_value);
					//预定义节点Output_29
					return;
					break;
				}
				
			}
			
			//预定义节点Output_29
			return;
			
			
		}
		public virtual void StartEventManager()
		{
			//执行节点CaseSteps_6
			PTestNode.CaseSteps("AutoTest_EventManager开启", "AutoTest_EventManager开启", "AutoTest_EventManager开启", true, ScreenType.None);
			//预定义节点OnMessage_135
			BpPluginNode.BPReCall += CallEvent;
			//执行节点Register_136
			BpPluginNode.Register();
			
		}
		public virtual void StopEventManager()
		{
			//执行节点CaseSteps_7
			PTestNode.CaseSteps("AutoTest_EventManager关闭", "AutoTest_EventManager关闭", "AutoTest_EventManager关闭", true, ScreenType.None);
			//预定义节点UnBindMessage_137
			BpPluginNode.BPReCall -= CallEvent;
			//执行节点Register_138
			BpPluginNode.Register();
			
		}
		public virtual void ToDoEvent(int ToDoEvent_16_ID)
		{
			//节点IntToString_33
			var IntToString_33_value = Convert.ToString(ToDoEvent_16_ID);
			//节点StringValue_31
			var StringValue_31_value = " - ，触发条件为： ";
			//节点StringValue_34
			var StringValue_34_value = " - ";
			//节点StringConcat_30
			var StringConcat_30_value = "AutoTest_EventManager: 进入通用事件 - " + IntToString_33_value + StringValue_31_value + this.AutoTest_EventManagerData[ToDoEvent_16_ID].TriggerType + StringValue_34_value + this.AutoTest_EventManagerData[ToDoEvent_16_ID].TriggerValue[0];
			//执行节点Log_29
			UnityEngine.Debug.Log(StringConcat_30_value);
			//执行节点SetWalkToID_96
			this.SetWalkToID(this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[0], ToDoEvent_16_ID);
			//节点IsNull_37
			var IsNull_37_ret = this.DelayHandle == null;
			//预定义节点IfThenElse_35
			if (IsNull_37_ret)
			{
				
			}
			else
			{
				//执行节点DelayStop_38
				Blueprint.DelayHandle.DelayStop(this.DelayHandle);
				
			}
			//预定义节点VarSetLocal_55
			this.NextEventID = this.AutoTest_EventManagerData[ToDoEvent_16_ID].Next;
			//预定义节点SwitchOnInt_26
			switch(this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoType)
			{
				case 0:
				{
					//节点StringValue_40
					var StringValue_40_value = "AutoTest_EventManager: 结束Case";
					//执行节点Log_39
					UnityEngine.Debug.Log(StringValue_40_value);
					//执行节点CaseFinished_41
					PTestNode.CaseFinished();
					//执行节点StopEventManager_42
					this.StopEventManager();
					break;
				}
				case 1:
				{
					//预定义节点VarSetLocal_98
					this.CurrEventID = ToDoEvent_16_ID;
					//预定义节点ArrayLoop_50
					for(int ArrayLoop_50_index = 0; ArrayLoop_50_index < this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList.Count; ++ArrayLoop_50_index)
					{
						var ArrayLoop_50_element = this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[ArrayLoop_50_index];
						//预定义节点ArrayAppend_49
						this.ToDoList.Add(ArrayLoop_50_element);
						
					}
					//预定义节点ActorInvokeRepeating_53
					var ActorInvokeRepeating_53_actorInvoke = InvokeRepeating(DoTypeOne, this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoDelay, this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoDelay);
					//预定义节点VarSetLocal_54
					this.DoTypeOneInvoke = ActorInvokeRepeating_53_actorInvoke;
					break;
				}
				case 2:
				{
					//预定义节点VarSetLocal_63
					this.CurrEventID = ToDoEvent_16_ID;
					//预定义节点ArrayLoop_59
					for(int ArrayLoop_59_index = 0; ArrayLoop_59_index < this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList.Count; ++ArrayLoop_59_index)
					{
						var ArrayLoop_59_element = this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[ArrayLoop_59_index];
						//预定义节点ArrayAppend_60
						this.ToDoList.Add(ArrayLoop_59_element);
						
					}
					//预定义节点ActorInvokeRepeating_62
					var ActorInvokeRepeating_62_actorInvoke = InvokeRepeating(DoTypeTwo, this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoDelay, this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoDelay);
					//预定义节点VarSetLocal_66
					this.DoTypeTwoInvoke = ActorInvokeRepeating_62_actorInvoke;
					break;
				}
				case 3:
				{
					//预定义节点DelayLoopUnlimited_70
					int DelayLoopUnlimited_70_index = 0;
					Blueprint.DelayHandle DelayLoopUnlimited_70_handle = null;
					DelayLoopUnlimited_70_handle = DelayControl.Instance.DelayLoop(this,"_36D556A7-C154-4F0A-B524-30AABD6A2134_70",()=>{
						try {
							//节点IntSubtract_92
							var IntSubtract_92_value = DelayLoopUnlimited_70_index - 1;
							//节点IntRemainder_75
							var IntRemainder_75_ret = IntSubtract_92_value % this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList.Count;
							//节点StringConcat_72
							var StringConcat_72_value = "AutoTest_EventManager: Do Type 3 - " + this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[IntRemainder_75_ret];
							//执行节点Log_73
							UnityEngine.Debug.Log(StringConcat_72_value);
							//执行节点DoDiffOperation_102
							this.DoDiffOperation(this.AutoTest_EventManagerData[ToDoEvent_16_ID].OperationType, this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[IntRemainder_75_ret]);
							
						} catch (Exception e){
							Debug.LogError("AT_EventManager.actorClass~  " + "NewGraph  ,nodeId:" + "70" + "\n" + e.ToString());
						}},this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoDelay,-1,()=>{ DelayLoopUnlimited_70_index++;},false,()=>{
					});//预定义节点VarSetLocal_71
					this.DelayHandle = DelayLoopUnlimited_70_handle;
					break;
				}
				case 4:
				{
					//预定义节点DelayLoop_79
					int DelayLoop_79_index = 0;
					Blueprint.DelayHandle DelayLoop_79_handle = null;
					DelayLoop_79_handle = DelayControl.Instance.DelayLoop(this,"_36D556A7-C154-4F0A-B524-30AABD6A2134_79",()=>{
						try {
							//节点IntSubtract_93
							var IntSubtract_93_value = DelayLoop_79_index - 1;
							//节点IntRemainder_83
							var IntRemainder_83_ret = IntSubtract_93_value % this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList.Count;
							//节点StringConcat_81
							var StringConcat_81_value = "AutoTest_EventManager: Do Type 4 - " + this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[IntRemainder_83_ret];
							//执行节点Log_80
							UnityEngine.Debug.Log(StringConcat_81_value);
							//执行节点DoDiffOperation_103
							this.DoDiffOperation(this.AutoTest_EventManagerData[ToDoEvent_16_ID].OperationType, this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoList[IntRemainder_83_ret]);
							
						} catch (Exception e){
							Debug.LogError("AT_EventManager.actorClass~  " + "NewGraph  ,nodeId:" + "79" + "\n" + e.ToString());
						}},this.AutoTest_EventManagerData[ToDoEvent_16_ID].TodoDelay,this.AutoTest_EventManagerData[ToDoEvent_16_ID].LoopNum,()=>{ DelayLoop_79_index++;},false,()=>{
							//预定义节点IfThenElse_88
							if (this.AutoTest_EventManagerData.ContainsKey(this.AutoTest_EventManagerData[ToDoEvent_16_ID].Next))
							{
								//执行节点ToDoEvent_82
								this.ToDoEvent(this.AutoTest_EventManagerData[ToDoEvent_16_ID].Next);
								
							}
							else
							{
								
							}
							
					});break;
				}
				
			}
			
			
		}
		public virtual void CallEvent(string CallEvent_13_param__0, List<string> CallEvent_13_param__1)
		{
			//预定义节点VarSetLocal_17
			this.TriggerType = CallEvent_13_param__0;
			//节点Greater_20
			var Greater_20_ret = CallEvent_13_param__1.Count > 0;
			//预定义节点IfThenElse_18
			if (Greater_20_ret)
			{
				//预定义节点VarSetLocal_121
				this.TriggerValue = CallEvent_13_param__1;
				
			}
			else
			{
				//预定义节点ArrayAppend_119
				this.TriggerValue.Add("None");
				
			}
			//节点StringValue_104
			var StringValue_104_value = " - ";
			//节点StringConcat_69
			var StringConcat_69_value = "AutoTest_EventManager: 触发事件 - " + CallEvent_13_param__0 + StringValue_104_value + this.TriggerValue[0];
			//执行节点Log_68
			UnityEngine.Debug.Log(StringConcat_69_value);
			//执行节点GetEventID_22
			var GetEventID_22_ID = this.GetEventID();
			//节点Equal_24
			var Equal_24_ret = GetEventID_22_ID == 0;
			//预定义节点IfThenElse_23
			if (Equal_24_ret)
			{
				
			}
			else
			{
				//执行节点ToDoEvent_25
				this.ToDoEvent(GetEventID_22_ID);
				
			}
			
		}
		
	}
}