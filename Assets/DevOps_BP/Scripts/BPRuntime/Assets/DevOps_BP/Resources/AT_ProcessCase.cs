//Generated by Blueprint
using System;
using System.Linq;
using System.Collections.Generic;
using UnityEngine;
using Blueprint.Actor.EventSystem;
using Blueprint.Logic;
namespace Blueprint.UnityLogic
{
	[LoadPath(@"AT_ProcessCase")]
	public class AT_ProcessCase : Blueprint.Actor.ActorBase
	{
		public Dictionary<int, Blueprint.Logic.AutoTest_ProcessStruct> AutoTest_ProcessData = new Dictionary<int, Blueprint.Logic.AutoTest_ProcessStruct>()
		{
			
		};
		public string TriggerType = "";
		public List<string> TriggerValue = new List<string>()
		{
			
		};
		public Blueprint.UnityLogic.AT_EventManager AT_Manager = default;
		public int WalkToEventID = 0;
		public Blueprint.DelayHandle DelayHandle = default;
		public int NextEventID = 0;
		public int CurrEventID = 0;
		public List<string> ToDoList = new List<string>()
		{
			
		};
		public Blueprint.Actor.ActorInvoke DoTypeOneInvoke = default;
		public Blueprint.Actor.ActorInvoke DoTypeTwoInvoke = default;
		public string RandomAccount = "";
		public int NewVar = 3;
		public AT_ProcessCase()
		{
			
		}
		public override void ResetVarValue()
		{
			base.ResetVarValue();
			DelayControl.Instance.RemoveAllDelay(this);
			AutoTest_ProcessData = new Dictionary<int, Blueprint.Logic.AutoTest_ProcessStruct>()
			{
				
			};
			TriggerType = "";
			TriggerValue = new List<string>()
			{
				
			};
			AT_Manager = default;
			WalkToEventID = 0;
			DelayHandle = default;
			NextEventID = 0;
			CurrEventID = 0;
			ToDoList = new List<string>()
			{
				
			};
			DoTypeOneInvoke = default;
			DoTypeTwoInvoke = default;
			RandomAccount = "";
			NewVar = 3;
			
		}
		public override void Awake()
		{
			base.Awake();
			
			// 因为无法触发第一次enable，所以这里手动触发第一次
			actorEventSystem.Send(ActorEventType.OnEnable);
		}
		public override void Start()
		{
			//节点StringValue_175
			var StringValue_175_value = "AutoTest : Process拉起";
			//执行节点Log_174
			UnityEngine.Debug.Log(StringValue_175_value);
			//执行节点CaseSteps_11
			PTestNode.CaseSteps("AutoTest_ProcessCase拉起", "AutoTest_ProcessCase拉起", "AutoTest_ProcessCase拉起", true, ScreenType.None);
			//预定义节点OnMessage_163
			BpPluginNode.BPReCall += CustomEvent;
			//执行节点Register_160
			BpPluginNode.Register();
			//执行节点isEditorPlatform_167
			var isEditorPlatform_167_ret = PTestNode.isEditorPlatform();
			//预定义节点IfThenElse_168
			if (isEditorPlatform_167_ret)
			{
				//执行节点UIClick_172
				BpPluginNode.UIClick("Middle/LoginView/Login");
				//预定义节点Delay_180
				DelayControl.Instance.Delay(this,"_B382B61F-957D-4091-9824-FDA913E49FC8_180",()=>{
					try {
						//执行节点UIClick_173
						BpPluginNode.UIClick("Middle/LoginStartView/btn_login");
						//预定义节点Delay_183
						DelayControl.Instance.Delay(this,"_B382B61F-957D-4091-9824-FDA913E49FC8_183",()=>{
							try {
								//节点StringValue_185
								var StringValue_185_value = "autotest:====准备点击按钮";
								//执行节点Log_186
								UnityEngine.Debug.Log(StringValue_185_value);
								//执行节点UIClick_184
								BpPluginNode.UIClick("Lower/HallDlg_New/panel_bottom_right/btn_attack/image_btn");
								
							} catch (Exception e){
								Debug.LogError("AT_ProcessCase.actorClass~  " + "NewGraph  ,nodeId:" + "183" + "\n" + e.ToString());
							}
						},20.0f);
						
					} catch (Exception e){
						Debug.LogError("AT_ProcessCase.actorClass~  " + "NewGraph  ,nodeId:" + "180" + "\n" + e.ToString());
					}
				},2.0f);
				
			}
			else
			{
				
			}
			//执行节点Log_176
			UnityEngine.Debug.Log(isEditorPlatform_167_ret);
			
		}
		public override void Update()
		{
			
		}
		public override void OnDestroy()
		{
			//执行节点CaseSteps_30
			PTestNode.CaseSteps("AutoTest_ProcessCase关闭", "AutoTest_ProcessCase关闭", "AutoTest_ProcessCase关闭", true, ScreenType.None);
			//预定义节点UnBindMessage_165
			BpPluginNode.BPReCall -= CustomEvent;
			//执行节点Register_166
			BpPluginNode.Register();
			
		}
		public virtual int GetEventID()
		{
			//函数局部变量
			//预定义节点MapLoop_20
			foreach(var MapLoop_20_item in this.AutoTest_ProcessData)
			{
				var MapLoop_20_key = MapLoop_20_item.Key;
				var struct_20_value = MapLoop_20_item.Value;
				//节点Equal_15
				var Equal_15_ret = this.TriggerType == "WalkFinish";
				//节点IntToString_18
				var IntToString_18_value = Convert.ToString(this.WalkToEventID);
				//节点Equal_14
				var Equal_14_ret = struct_20_value.TriggerValue[0] == IntToString_18_value;
				//节点And_16
				var And_16_value = Equal_15_ret && Equal_14_ret ;
				//预定义节点IfThenElse_13
				if (And_16_value)
				{
					//预定义节点Output_21
					return MapLoop_20_key;
					
				}
				else
				{
					//节点Equal_5
					var Equal_5_ret = struct_20_value.TriggerType == this.TriggerType;
					//节点Equal_9
					var Equal_9_ret = struct_20_value.TriggerValue[0] == this.TriggerValue[0];
					//节点And_7
					var And_7_value = Equal_5_ret && Equal_9_ret ;
					//预定义节点IfThenElse_4
					if (And_7_value)
					{
						//预定义节点Output_22
						return MapLoop_20_key;
						
					}
					else
					{
						
					}
					
				}
				
			}
			//预定义节点Output_2
			return 0;
			return default;
			
		}
		public virtual void SetWalkToID(string SetWalkToID_gm, int SetWalkToID_ID)
		{
			//函数局部变量
			//节点StringContains_3
			var StringContains_3_ret = SetWalkToID_gm.Contains("WalkToPos");
			//预定义节点IfThenElse_2
			if (StringContains_3_ret)
			{
				//预定义节点VarSetLocal_5
				this.WalkToEventID = SetWalkToID_ID;
				
			}
			else
			{
				
			}
			
			
		}
		public virtual void DoTypeOne()
		{
			//函数局部变量
			//节点Greater_5
			var Greater_5_ret = this.ToDoList.Count > 0;
			//预定义节点IfThenElse_2
			if (Greater_5_ret)
			{
				//节点StringConcat_16
				var StringConcat_16_value = "AutoTest_ProcessCase: Do Type 1 - " + this.ToDoList[0];
				//执行节点Log_15
				UnityEngine.Debug.Log(StringConcat_16_value);
				//执行节点DoDiffOperation_28
				this.DoDiffOperation(this.AutoTest_ProcessData[this.CurrEventID].OperationType, this.ToDoList[0]);
				//预定义节点ArrayRemove_12
				this.ToDoList.RemoveAt(0);
				
			}
			else
			{
				//节点IsNull_33
				var IsNull_33_ret = this.DoTypeOneInvoke == null;
				//预定义节点IfThenElse_32
				if (IsNull_33_ret)
				{
					
				}
				else
				{
					//执行节点Cancel_6
					this.DoTypeOneInvoke.Cancel();
					
				}
				//预定义节点IfThenElse_8
				if (this.AutoTest_ProcessData.ContainsKey(this.NextEventID))
				{
					//执行节点ToDoEvent_27
					this.ToDoEvent(this.NextEventID);
					
				}
				else
				{
					
				}
				
			}
			
			
		}
		public virtual void DoTypeTwo()
		{
			//函数局部变量
			//节点Greater_5
			var Greater_5_ret = this.ToDoList.Count > 0;
			//预定义节点IfThenElse_2
			if (Greater_5_ret)
			{
				//节点StringConcat_14
				var StringConcat_14_value = "AutoTest_ProcessCase: Do Type 2 - " + this.ToDoList[0];
				//执行节点Log_13
				UnityEngine.Debug.Log(StringConcat_14_value);
				//执行节点DoDiffOperation_10
				this.DoDiffOperation(this.AutoTest_ProcessData[this.CurrEventID].OperationType, this.ToDoList[0]);
				//预定义节点ArrayRemove_11
				this.ToDoList.RemoveAt(0);
				//预定义节点MapRemove_20
				this.AutoTest_ProcessData.Remove(this.CurrEventID);
				
			}
			else
			{
				//节点IsNull_23
				var IsNull_23_ret = this.DoTypeTwoInvoke == null;
				//预定义节点IfThenElse_22
				if (IsNull_23_ret)
				{
					
				}
				else
				{
					//执行节点Cancel_6
					this.DoTypeTwoInvoke.Cancel();
					
				}
				//预定义节点IfThenElse_8
				if (this.AutoTest_ProcessData.ContainsKey(this.NextEventID))
				{
					//执行节点ToDoEvent_7
					this.ToDoEvent(this.NextEventID);
					
				}
				else
				{
					
				}
				
			}
			
			
		}
		public virtual void DoDiffOperation(int DoDiffOperation_operation, string DoDiffOperation_cmd)
		{
			//函数局部变量
			//预定义节点SwitchOnInt_2
			switch(DoDiffOperation_operation)
			{
				case 0:
				{
					//执行节点CallGM_26
					BpPluginNode.CallGM(DoDiffOperation_cmd);
					//节点StringConcat_8
					var StringConcat_8_value = "AutoTest_ProcessCase: 执行GM指令 - " + DoDiffOperation_cmd;
					//执行节点CaseSteps_7
					PTestNode.CaseSteps(StringConcat_8_value, StringConcat_8_value, StringConcat_8_value, true, ScreenType.None);
					//执行节点Log_6
					UnityEngine.Debug.Log(StringConcat_8_value);
					break;
				}
				case 1:
				{
					//数据节点Getinstance_27
					var Getinstance_27_instance = BpPluginNode.instance;
					//执行节点FindGameobjLooper_28
					Getinstance_27_instance.FindGameobjLooper(DoDiffOperation_cmd, Blueprint.Logic.Client.AutoTest_ProcessCaseInstance.PlanSetupData.WaitForButton, ()=>
					{
						//节点StringConcat_17
						var StringConcat_17_value = "AutoTest_ProcessCase: 未找到按钮 - " + DoDiffOperation_cmd;
						//执行节点CaseSteps_13
						PTestNode.CaseSteps(StringConcat_17_value, StringConcat_17_value, StringConcat_17_value, false, ScreenType.None);
						//执行节点Log_15
						UnityEngine.Debug.Log(StringConcat_17_value);
						//执行节点CaseFinished_18
						PTestNode.CaseFinished();
						
					}
					, (CallbackFunction_25_arg1)=>
					{
						//执行节点UIClick_29
						BpPluginNode.UIClick(DoDiffOperation_cmd);
						//节点StringConcat_16
						var StringConcat_16_value = "AutoTest_ProcessCase: 点击按钮 - " + DoDiffOperation_cmd;
						//执行节点CaseSteps_12
						PTestNode.CaseSteps(StringConcat_16_value, StringConcat_16_value, StringConcat_16_value, true, ScreenType.None);
						//执行节点Log_11
						UnityEngine.Debug.Log(StringConcat_16_value);
						
					}
					);
					break;
				}
				case 2:
				{
					//节点StringConcat_22
					var StringConcat_22_value = "AutoTest_ProcessCase: 拍照 - " + DoDiffOperation_cmd;
					//执行节点CaseSteps_21
					PTestNode.CaseSteps(StringConcat_22_value, StringConcat_22_value, StringConcat_22_value, true, ScreenType.SceenShot);
					//执行节点Log_23
					UnityEngine.Debug.Log(StringConcat_22_value);
					break;
				}
				
			}
			
			
			
		}
		public virtual void CustomEvent(string CustomEvent_15_param__0, List<string> CustomEvent_15_param__1)
		{
			//预定义节点VarSetLocal_21
			this.TriggerType = CustomEvent_15_param__0;
			//节点Greater_19
			var Greater_19_ret = CustomEvent_15_param__1.Count > 0;
			//预定义节点IfThenElse_20
			if (Greater_19_ret)
			{
				//预定义节点VarSetLocal_91
				this.TriggerValue = CustomEvent_15_param__1;
				
			}
			else
			{
				//预定义节点ArrayAppend_89
				this.TriggerValue.Add("None");
				
			}
			//执行节点GetEventID_27
			var GetEventID_27_ID = this.GetEventID();
			//节点Equal_24
			var Equal_24_ret = GetEventID_27_ID == 0;
			//预定义节点IfThenElse_23
			if (Equal_24_ret)
			{
				
			}
			else
			{
				//执行节点ToDoEvent_28
				this.ToDoEvent(GetEventID_27_ID);
				
			}
			
		}
		public virtual void ToDoEvent(int ToDoEvent_25_ID)
		{
			//节点IntToString_34
			var IntToString_34_value = Convert.ToString(ToDoEvent_25_ID);
			//节点StringValue_35
			var StringValue_35_value = " - ，触发条件为： ";
			//节点StringValue_36
			var StringValue_36_value = " - ";
			//节点StringConcat_33
			var StringConcat_33_value = "AutoTest_ProcessCase:  进入事件 - " + IntToString_34_value + StringValue_35_value + this.AutoTest_ProcessData[ToDoEvent_25_ID].TriggerType + StringValue_36_value + this.AutoTest_ProcessData[ToDoEvent_25_ID].TriggerValue[0];
			//执行节点Log_32
			UnityEngine.Debug.Log(StringConcat_33_value);
			//执行节点SetWalkToID_40
			this.SetWalkToID(this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue, ToDoEvent_25_ID);
			//节点IsNull_43
			var IsNull_43_ret = this.DelayHandle == null;
			//预定义节点IfThenElse_42
			if (IsNull_43_ret)
			{
				
			}
			else
			{
				//执行节点DelayStop_44
				Blueprint.DelayHandle.DelayStop(this.DelayHandle);
				
			}
			//预定义节点VarSetLocal_46
			this.NextEventID = this.AutoTest_ProcessData[ToDoEvent_25_ID].Next;
			//预定义节点SwitchOnInt_47
			switch(this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoType)
			{
				case 0:
				{
					//节点StringValue_49
					var StringValue_49_value = "AutoTest_ProcessCase: 结束Case";
					//执行节点Log_48
					UnityEngine.Debug.Log(StringValue_49_value);
					//执行节点CaseFinished_50
					PTestNode.CaseFinished();
					//执行节点StopEventManager_53
					this.AT_Manager.StopEventManager();
					//执行节点CaseSteps_30
					PTestNode.CaseSteps("AutoTest_ProcessCase关闭", "AutoTest_ProcessCase关闭", "AutoTest_ProcessCase关闭", true, ScreenType.None);
					//预定义节点UnBindMessage_165
					BpPluginNode.BPReCall -= CustomEvent;
					//执行节点Register_166
					BpPluginNode.Register();
					break;
				}
				case 1:
				{
					//预定义节点VarSetLocal_54
					this.CurrEventID = ToDoEvent_25_ID;
					//预定义节点ArrayAppend_55
					this.ToDoList.Add(this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue);
					//预定义节点DelayLoop_112
					int DelayLoop_112_index = 0;
					Blueprint.DelayHandle DelayLoop_112_handle = null;
					DelayLoop_112_handle = DelayControl.Instance.DelayLoop(this,"_B382B61F-957D-4091-9824-FDA913E49FC8_112",()=>{
						try {
							//节点IntSubtract_117
							var IntSubtract_117_value = DelayLoop_112_index - 1;
							//节点StringConcat_119
							var StringConcat_119_value = "AutoTest_ProcessCase: Do Type 1 - " + this.ToDoList[IntSubtract_117_value];
							//执行节点Log_118
							UnityEngine.Debug.Log(StringConcat_119_value);
							//执行节点DoDiffOperation_115
							this.DoDiffOperation(this.AutoTest_ProcessData[ToDoEvent_25_ID].OperationType, this.ToDoList[IntSubtract_117_value]);
							//预定义节点ArrayRemove_116
							this.ToDoList.RemoveAt(IntSubtract_117_value);
							
						} catch (Exception e){
							Debug.LogError("AT_ProcessCase.actorClass~  " + "NewGraph  ,nodeId:" + "112" + "\n" + e.ToString());
						}},this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoDelay,this.ToDoList.Count,()=>{ DelayLoop_112_index++;},true,()=>{
							//预定义节点IfThenElse_120
							if (this.AutoTest_ProcessData.ContainsKey(this.NextEventID))
							{
								//执行节点ToDoEvent_124
								this.ToDoEvent(this.NextEventID);
								
							}
							else
							{
								
							}
							
					});break;
				}
				case 2:
				{
					//预定义节点VarSetLocal_69
					this.CurrEventID = ToDoEvent_25_ID;
					//预定义节点ArrayAppend_70
					this.ToDoList.Add(this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue);
					//预定义节点DelayLoop_126
					int DelayLoop_126_index = 0;
					Blueprint.DelayHandle DelayLoop_126_handle = null;
					DelayLoop_126_handle = DelayControl.Instance.DelayLoop(this,"_B382B61F-957D-4091-9824-FDA913E49FC8_126",()=>{
						try {
							//节点IntSubtract_129
							var IntSubtract_129_value = DelayLoop_126_index - 1;
							//节点StringConcat_131
							var StringConcat_131_value = "AutoTest_ProcessCase: Do Type 2 - " + this.ToDoList[IntSubtract_129_value];
							//执行节点Log_130
							UnityEngine.Debug.Log(StringConcat_131_value);
							//执行节点DoDiffOperation_127
							this.DoDiffOperation(this.AutoTest_ProcessData[ToDoEvent_25_ID].OperationType, this.ToDoList[IntSubtract_129_value]);
							//预定义节点ArrayRemove_128
							this.ToDoList.RemoveAt(IntSubtract_129_value);
							
						} catch (Exception e){
							Debug.LogError("AT_ProcessCase.actorClass~  " + "NewGraph  ,nodeId:" + "126" + "\n" + e.ToString());
						}},this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoDelay,this.ToDoList.Count,()=>{ DelayLoop_126_index++;},true,()=>{
							//预定义节点MapRemove_140
							this.AutoTest_ProcessData.Remove(this.AutoTest_ProcessData[ToDoEvent_25_ID].ID);
							//预定义节点IfThenElse_132
							if (this.AutoTest_ProcessData.ContainsKey(this.NextEventID))
							{
								//执行节点ToDoEvent_136
								this.ToDoEvent(this.NextEventID);
								
							}
							else
							{
								
							}
							
					});break;
				}
				case 3:
				{
					//预定义节点DelayLoopUnlimited_74
					int DelayLoopUnlimited_74_index = 0;
					Blueprint.DelayHandle DelayLoopUnlimited_74_handle = null;
					DelayLoopUnlimited_74_handle = DelayControl.Instance.DelayLoop(this,"_B382B61F-957D-4091-9824-FDA913E49FC8_74",()=>{
						try {
							//节点StringConcat_77
							var StringConcat_77_value = "AutoTest_ProcessCase: Do Type 3 - " + this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue;
							//执行节点Log_76
							UnityEngine.Debug.Log(StringConcat_77_value);
							//执行节点DoDiffOperation_182
							this.DoDiffOperation(this.AutoTest_ProcessData[ToDoEvent_25_ID].OperationType, this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue);
							
						} catch (Exception e){
							Debug.LogError("AT_ProcessCase.actorClass~  " + "NewGraph  ,nodeId:" + "74" + "\n" + e.ToString());
						}},this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoDelay,-1,()=>{ DelayLoopUnlimited_74_index++;},false,()=>{
					});//预定义节点VarSetLocal_75
					this.DelayHandle = DelayLoopUnlimited_74_handle;
					break;
				}
				case 4:
				{
					//节点StringToInt_65
					var StringToInt_65_value = Convert.ToInt32(this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue);
					//预定义节点IfThenElse_62
					if (this.AT_Manager.AutoTest_EventManagerData.ContainsKey(StringToInt_65_value))
					{
						//节点StringConcat_67
						var StringConcat_67_value = "AutoTest_ProcessCase: Do Type 4 - " + this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue;
						//执行节点Log_68
						UnityEngine.Debug.Log(StringConcat_67_value);
						//执行节点ToDoEvent_66
						this.AT_Manager.ToDoEvent(StringToInt_65_value);
						
					}
					else
					{
						
					}
					break;
				}
				case 5:
				{
					//节点StringConcat_150
					var StringConcat_150_value = "AutoTest_ProcessCase: Do Type 5 - " + this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue;
					//执行节点Log_151
					UnityEngine.Debug.Log(StringConcat_150_value);
					//执行节点DoDiffOperation_148
					this.DoDiffOperation(this.AutoTest_ProcessData[ToDoEvent_25_ID].OperationType, this.AutoTest_ProcessData[ToDoEvent_25_ID].TodoValue);
					//预定义节点IfThenElse_152
					if (this.AutoTest_ProcessData.ContainsKey(this.AutoTest_ProcessData[ToDoEvent_25_ID].Next))
					{
						//执行节点ToDoEvent_153
						this.ToDoEvent(this.AutoTest_ProcessData[ToDoEvent_25_ID].Next);
						
					}
					else
					{
						
					}
					break;
				}
				
			}
			
			
		}
		
	}
}