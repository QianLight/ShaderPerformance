//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.0
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace EditorEcs {

public class Xuthus_VirtualServer {
  public static void beginSirius(IFacility arg0) {
    Xuthus_VirtualServerPINVOKE.beginSirius(IFacility.getCPtr(arg0));
  }

  public static void destroy(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.destroy(arg0);
  }

  public static void endSirius() {
    Xuthus_VirtualServerPINVOKE.endSirius();
  }

  public static void update(float arg0) {
    Xuthus_VirtualServerPINVOKE.update(arg0);
  }

  public static void drive2move(ulong arg0, float arg1) {
    Xuthus_VirtualServerPINVOKE.drive2move(arg0, arg1);
  }

  public static void drive2dest(ulong arg0, float arg1, float arg2, float arg3, float arg4) {
    Xuthus_VirtualServerPINVOKE.drive2dest(arg0, arg1, arg2, arg3, arg4);
  }

  public static void drive2disable(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.drive2disable(arg0);
  }

  public static void drive2enable(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.drive2enable(arg0);
  }

  public static void unbind_allskill(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.unbind_allskill(arg0);
  }

  public static bool reload(uint arg0) {
    bool ret = Xuthus_VirtualServerPINVOKE.reload(arg0);
    return ret;
  }

  public static ulong create(ulong arg0, ulong arg1, float arg2, float arg3, float arg4, float arg5, bool arg6, bool arg7) {
    ulong ret = Xuthus_VirtualServerPINVOKE.create__SWIG_0(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
  }

  public static ulong create(ulong arg0, ulong arg1, float arg2, float arg3, float arg4, float arg5, bool arg6) {
    ulong ret = Xuthus_VirtualServerPINVOKE.create__SWIG_1(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
    return ret;
  }

  public static ulong create(ulong arg0, ulong arg1, float arg2, float arg3, float arg4, float arg5) {
    ulong ret = Xuthus_VirtualServerPINVOKE.create__SWIG_2(arg0, arg1, arg2, arg3, arg4, arg5);
    return ret;
  }

  public static void bindhit(ulong arg0, int arg1, uint arg2) {
    Xuthus_VirtualServerPINVOKE.bindhit(arg0, arg1, arg2);
  }

  public static void setPosition(ulong arg0, float arg1, float arg2, float arg3) {
    Xuthus_VirtualServerPINVOKE.setPosition(arg0, arg1, arg2, arg3);
  }

  public static void setActionRatio(ulong arg0, float arg1) {
    Xuthus_VirtualServerPINVOKE.setActionRatio(arg0, arg1);
  }

  public static void onMoveSpeedChanged(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.onMoveSpeedChanged(arg0);
  }

  public static void bind_offslotskill(ulong arg0, uint arg1) {
    Xuthus_VirtualServerPINVOKE.bind_offslotskill(arg0, arg1);
  }

  public static void drive2idle(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.drive2idle(arg0);
  }

  public static void drive2stand(ulong arg0, float arg1, float arg2, float arg3, float arg4) {
    Xuthus_VirtualServerPINVOKE.drive2stand(arg0, arg1, arg2, arg3, arg4);
  }

  public static void drive2death(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.drive2death(arg0);
  }

  public static bool drive2skill(ulong arg0, uint arg1) {
    bool ret = Xuthus_VirtualServerPINVOKE.drive2skill__SWIG_0(arg0, arg1);
    return ret;
  }

  public static bool drive2skill(ulong arg0, uint arg1, ulong arg2) {
    bool ret = Xuthus_VirtualServerPINVOKE.drive2skill__SWIG_1(arg0, arg1, arg2);
    return ret;
  }

  public static bool drive2hit(ulong arg0, uint arg1, ulong arg2, float arg3) {
    bool ret = Xuthus_VirtualServerPINVOKE.drive2hit(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static void slot2skill(ulong arg0, ulong arg1, XInputSlot arg2, XSkillType arg3) {
    Xuthus_VirtualServerPINVOKE.slot2skill(arg0, arg1, (int)arg2, (int)arg3);
  }

  public static void force2idle(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.force2idle(arg0);
  }

  public static void endskill(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.endskill(arg0);
  }

  public static void setqte(ulong arg0, uint arg1, bool arg2) {
    Xuthus_VirtualServerPINVOKE.setqte(arg0, arg1, arg2);
  }

  public static uint getCurSkill(ulong arg0) {
    uint ret = Xuthus_VirtualServerPINVOKE.getCurSkill(arg0);
    return ret;
  }

  public static XStateType getState(ulong arg0) {
    XStateType ret = (XStateType)Xuthus_VirtualServerPINVOKE.getState(arg0);
    return ret;
  }

  public static uint getCurSkill_ecs(ulong arg0) {
    uint ret = Xuthus_VirtualServerPINVOKE.getCurSkill_ecs(arg0);
    return ret;
  }

  public static XStateType getState_ecs(ulong arg0) {
    XStateType ret = (XStateType)Xuthus_VirtualServerPINVOKE.getState_ecs(arg0);
    return ret;
  }

  public static bool isCDTriggerAtEnd(ulong arg0, uint arg1) {
    bool ret = Xuthus_VirtualServerPINVOKE.isCDTriggerAtEnd(arg0, arg1);
    return ret;
  }

  public static bool needsync(ulong arg0) {
    bool ret = Xuthus_VirtualServerPINVOKE.needsync(arg0);
    return ret;
  }

  public static XNet sync(ulong arg0) {
    global::System.IntPtr cPtr = Xuthus_VirtualServerPINVOKE.sync(arg0);
    XNet ret = (cPtr == global::System.IntPtr.Zero) ? null : new XNet(cPtr, false);
    return ret;
  }

  public static bool needsync_ecs(ulong arg0) {
    bool ret = Xuthus_VirtualServerPINVOKE.needsync_ecs(arg0);
    return ret;
  }

  public static XNet sync_ecs(ulong arg0) {
    global::System.IntPtr cPtr = Xuthus_VirtualServerPINVOKE.sync_ecs(arg0);
    XNet ret = (cPtr == global::System.IntPtr.Zero) ? null : new XNet(cPtr, false);
    return ret;
  }

  public static float getPosX(ulong arg0) {
    float ret = Xuthus_VirtualServerPINVOKE.getPosX(arg0);
    return ret;
  }

  public static float getPosY(ulong arg0) {
    float ret = Xuthus_VirtualServerPINVOKE.getPosY(arg0);
    return ret;
  }

  public static float getPosZ(ulong arg0) {
    float ret = Xuthus_VirtualServerPINVOKE.getPosZ(arg0);
    return ret;
  }

  public static uint hash(string arg0) {
    uint ret = Xuthus_VirtualServerPINVOKE.hash(arg0);
    if (Xuthus_VirtualServerPINVOKE.SWIGPendingException.Pending) throw Xuthus_VirtualServerPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public unsafe static bool cacheSkillScript(uint arg0, byte[] json) {
    fixed ( byte* swig_ptrTo_json = json ) {
    {
      bool ret = Xuthus_VirtualServerPINVOKE.cacheSkillScript(arg0, (global::System.IntPtr)swig_ptrTo_json);
      return ret;
    }
    }
  }

  public unsafe static bool cacheHitScript(uint arg0, byte[] json) {
    fixed ( byte* swig_ptrTo_json = json ) {
    {
      bool ret = Xuthus_VirtualServerPINVOKE.cacheHitScript(arg0, (global::System.IntPtr)swig_ptrTo_json);
      return ret;
    }
    }
  }

  public static float getPosFromGetterX(ulong arg0, int arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getPosFromGetterX(arg0, arg1);
    return ret;
  }

  public static float getPosFromGetterY(ulong arg0, int arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getPosFromGetterY(arg0, arg1);
    return ret;
  }

  public static float getPosFromGetterZ(ulong arg0, int arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getPosFromGetterZ(arg0, arg1);
    return ret;
  }

  public static float getFaceFromGetter(ulong arg0, int arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getFaceFromGetter(arg0, arg1);
    return ret;
  }

  public static float getFace(ulong arg0) {
    float ret = Xuthus_VirtualServerPINVOKE.getFace(arg0);
    return ret;
  }

  public static float getFace_ecs(ulong arg0) {
    float ret = Xuthus_VirtualServerPINVOKE.getFace_ecs(arg0);
    return ret;
  }

  public static XHitType getHitState(ulong arg0) {
    XHitType ret = (XHitType)Xuthus_VirtualServerPINVOKE.getHitState(arg0);
    return ret;
  }

  public static float getCoolDown(ulong arg0, uint arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getCoolDown(arg0, arg1);
    return ret;
  }

  public static float getCoolDownLeft(ulong arg0, uint arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getCoolDownLeft(arg0, arg1);
    return ret;
  }

  public static float getCoolDown_ecs(ulong arg0, uint arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getCoolDown_ecs(arg0, arg1);
    return ret;
  }

  public static float getCoolDownLeft_ecs(ulong arg0, uint arg1) {
    float ret = Xuthus_VirtualServerPINVOKE.getCoolDownLeft_ecs(arg0, arg1);
    return ret;
  }

  public static void fresh2CoolDown(ulong arg0, uint skill) {
    Xuthus_VirtualServerPINVOKE.fresh2CoolDown__SWIG_0(arg0, skill);
  }

  public static void fresh2CoolDown(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.fresh2CoolDown__SWIG_1(arg0);
  }

  public static void clear2CoolDown(ulong arg0, uint skill) {
    Xuthus_VirtualServerPINVOKE.clear2CoolDown__SWIG_0(arg0, skill);
  }

  public static void clear2CoolDown(ulong arg0) {
    Xuthus_VirtualServerPINVOKE.clear2CoolDown__SWIG_1(arg0);
  }

  public static void set2CoolDown(ulong arg0, uint arg1, float arg2) {
    Xuthus_VirtualServerPINVOKE.set2CoolDown(arg0, arg1, arg2);
  }

  public static void set2CoolDown4SelfCd(ulong arg0, uint arg1) {
    Xuthus_VirtualServerPINVOKE.set2CoolDown4SelfCd(arg0, arg1);
  }

  public static void change2CoolDown(ulong arg0, uint arg1, bool arg2, float arg3) {
    Xuthus_VirtualServerPINVOKE.change2CoolDown(arg0, arg1, arg2, arg3);
  }

  public static int getCollisionType(ulong arg0) {
    int ret = Xuthus_VirtualServerPINVOKE.getCollisionType(arg0);
    return ret;
  }

  public static void frameFixed(ulong arg0, bool arg1) {
    Xuthus_VirtualServerPINVOKE.frameFixed(arg0, arg1);
  }

  public static void cooldownFixed(ulong arg0, bool arg1) {
    Xuthus_VirtualServerPINVOKE.cooldownFixed(arg0, arg1);
  }

  public static void setDebug(bool arg0) {
    Xuthus_VirtualServerPINVOKE.setDebug(arg0);
  }

  public static int getVersion() {
    int ret = Xuthus_VirtualServerPINVOKE.getVersion();
    return ret;
  }

  public static readonly int _FW_VERSION_ = Xuthus_VirtualServerPINVOKE._FW_VERSION__get();
  public static readonly int XNodeMax = Xuthus_VirtualServerPINVOKE.XNodeMax_get();
  public static readonly int XVirtualNodeMax = Xuthus_VirtualServerPINVOKE.XVirtualNodeMax_get();
  public static readonly int QTE_MAX = Xuthus_VirtualServerPINVOKE.QTE_MAX_get();
  public static readonly int COND_MAX = Xuthus_VirtualServerPINVOKE.COND_MAX_get();
  public static readonly int SWITCH_MAX = Xuthus_VirtualServerPINVOKE.SWITCH_MAX_get();
  public static readonly int UNTIL_MAX = Xuthus_VirtualServerPINVOKE.UNTIL_MAX_get();
  public static readonly int SWITCH_BRANCH_MAX = Xuthus_VirtualServerPINVOKE.SWITCH_BRANCH_MAX_get();
  public static readonly int LOOP_MAX = Xuthus_VirtualServerPINVOKE.LOOP_MAX_get();
  public static readonly int BULLET_GEN_MAX = Xuthus_VirtualServerPINVOKE.BULLET_GEN_MAX_get();
  public static readonly int BULLET_LIFE_MAX = Xuthus_VirtualServerPINVOKE.BULLET_LIFE_MAX_get();
  public static readonly int PENDING_TIME = Xuthus_VirtualServerPINVOKE.PENDING_TIME_get();
  public static readonly int TARGETS_MAX = Xuthus_VirtualServerPINVOKE.TARGETS_MAX_get();
  public static readonly int XSync_Min_Lag = Xuthus_VirtualServerPINVOKE.XSync_Min_Lag_get();
  public static readonly int XSync_Max_Lag = Xuthus_VirtualServerPINVOKE.XSync_Max_Lag_get();
}

}
